--- !ZMirror


# enable logging of the environment variables for all udev and zed events
log_env: yes

# When disable_commands is enabled, then zmirror never executes any commands 
# but only logs the commands that it would execute. This is helpful when you
# want to interact want to test things and/or manually interact with the 
# devices without zmirror 
disable_commands: no


# under here all top-level entities (such as disks, partitions, lvm volume groups
# or zpools) are configured
content:


  # This zpool contains my root filesystem. It also contains my most important data (my projects)
  #
  # the configuration below displays my mirroring and backup strategy.
  - !ZPool 
    name: zmirror-sysfs


  # a zpool cannot be taken offline, once all of its backing blockdevs have 
  # disappeared. In such a case you have to reboot to get the ZFS kernel
  # module into a state which allows you to reimport the zpool.



  # the disk zmirror-sysfs-a is one of the disks that back the zmirror-sysfs zpool
  # it is an NVMe drive built into my computer
  # and this is the partition (on the drive) that contains a mirror of the data of the zmirror-sysfs-zpool
  - !Partition

    # IMPORTANT: partition names that will be used by zmirror MUST be unique
    name: zmirror-sysfs-a
    
    content:


      # we use DMCrypt over ZFS native encryption for two reasons:
      #
      # -a) while it encrypts file content, it does not encrypt filenames
      #   and other metadata
      # -b) zfs send/receive currently corrupts data from encrypted datasets
      #   (see https://github.com/openzfs/zfs/issues/12014)
      #
      - !DMCrypt

        # IMPORT: the names of DM crypts in your system MUST be unique
        name: zmirror-sysfs-a
        
        # zmirror can only work with key-files as of now.
        key-file: ./test/zmirror-key
        # if somebody was willing to write a python function
        # that acquires the key either from the user (systemd-ask-password)
        # or from some encryption system (smart card?) you
        # are very welcome. The zmirror daemon runs as root.

        # the parent-child relationship is always directly visible in this
        # configuration. I.e. the parent of this DMCrypt *is* the partition
        # and the children of this DMCrypt (or rather the only child in this
        # case)
        on_parent_online:
          - online

        # when all children are offline (in this case there is only one,
        # namely one of the mirrors that backs the zmirror-sysfs zpool)
        # thes this dmcrypt should be closed
        on_children_offline: 
        
          # synonm: offline == close
          - offline

        content:
          
          # this might be considered a virtual entity. It basically tells zmirror
          # that the data inside the partition is the data backing the zpools
          # (or in other words, that the partition is the blockdev that backs
          # the zpool)
          - !ZFSBackingBlockDevice
            # name for the zfs pool
            pool: zmirror-sysfs
          
            # the name of the zfs-backing blockdev as it appears in `zpool status`
            dev: zmirror-sysfs-a

            on_parent_online:

              # this has no effect if the pool is already imported
              - import-pool

              # this has no effect if the command before imported the pool
              # i.e. this only has an effect if the pool was already imported
              - online

            on_scrubbed:
              - trim

            scrub_interval: 3 weeks



  # the disk zmirror-sysfs-b is an NVMe disk that is connected to my computer
  # via USB c
  # it serves as a failover in case zmirror-sysfs-a has a hardware error
  - !Disk

    # the uuid of the gpt partition table
    uuid: abcdefg01234

    # the linux kernel is not aware that my usb-c NVMe enclosure does in fact
    # support the trim command.
    #
    # WARNING: ONLY set this to true if you absolutely know that your en supports
    # trim.
    # 
    # you can find out using
    #
    # :: sg_vpd -a /dev/sdX | grep "map"
    # 
    #   
    # A report like
    #
    # >> 
    #   Maximum unmap LBA count: 0 [Unmap command not implemented]
    #   Maximum unmap block descriptor count: 0 [Unmap command not implemented]
    #   Optimal unmap granularity: 0 blocks [not reported]
    #
    # means that trim is not supported, so stop there. 

    # A report like:

    # >>  
    #   Maximum unmap LBA count: 0x1400000
    #   Maximum unmap block descriptor count: 0x1
    #   Optimal unmap granularity: 0x1
    # 
    # means that trim is supported.
    force_enable_trim: yes
    # 
    # what zmirror does to enable trim is catch every udev add or change event for 
    # the disk and do
    # 
    # :: echo "unmap" > /sys/block/sdX/device/scsi_disk/0:0:0:0/provisioning_mode
    # 
    # as well as compute the maximum number of discard bytes and tell the kernel:
    # 
    # :: echo 10737418240 > /sys/block/sdX/queue/discard_max_bytes



    content:

    - !Partition

      # the partition name must be unique even if you configure a partition as the content
      # of a disk in zmirror. This is because we still rely on udev events and those do
      # not contain the disk to which a udev event belongs. 
      #
      # unique names also always make debugging your configuration easier.
      name: zmirror-sysfs-b

      
      content:
        - !DMCrypt

          name: zmirror-sysfs-b
          
          key_file: ./test/zmirror-key

          on_children_offline: 
            - offline

          on_parent_online:
            - online

          content:
            - !ZFSBackingBlockDevice
            
              dev: zmirror-sysfs-b
              pool: zmirror-sysfs

              on_parent_online: 
                - online

              on_scrubbed:
                - trim

              scrub_interval: 1 week





  # the disk zmirror-sysfs-c is equal in hardware and configuration to
  # zmirror-sysfs-b.
  #
  # I switch out c and b every other day. Their task is to mirror the
  # internal drive and be a failover. Having only one of them connected
  # at any one time means, that I have a full and recent copy of my data
  # in case an overvoltagecondition destroys my PC and both the internal
  # NVMe drive and the external NVMe drive that is currently connected.
  #
  # Both zmirror-sysfs-b and zmirror-sysfs-c operate in full PCIe 4.0
  # speed, so they are just as fast as the internal NVMe drive.
  - !Disk

    # the uuid of the gpt partition table
    uuid: abcdefg012345

    force_enable_trim: yes


    content:

    - !Partition

      # the partition name must be unique even if you configure a partition as the content
      # of a disk in zmirror. This is because we still rely on udev events and those do
      # not contain the disk to which a udev event belongs. 
      #
      # unique names also always make debugging your configuration easier.
      name: zmirror-sysfs-c

      
      content:
        - !DMCrypt

          name: zmirror-sysfs-c
          
          key_file: ./test/zmirror-key

          on_children_offline: 
            - offline

          on_parent_online:
            - online

          content:
            - !ZFSBackingBlockDevice
            
              dev: zmirror-sysfs-c
              pool: zmirror-sysfs

              on_parent_online: 
                - online

              on_scrubbed:
                - trim

              scrub_interval: 1 week




  # The sysfs zpool contains (in addition to the OS and config files) my most 
  # important projects files. Hence I have a 2TB nvme drive named zmirror-sysfs-s
  # (s stands for "s"afe) which I carry around with myself and which I connect 
  # when I'm working on my computer.
  # 
  # This NVMe drive is a different spec (2242) than sysfs-a, b and c. It has a smaller
  # form factor, so it fits into a smaller USB drive big encloser. But it also is 
  # slower (PCIe 1.0) than the other three. Hence I take it offline after a resilver.
  # 
  # This mitigates the risk of losing my most recent changes due to a break-in 
  # while I'm away.
  #
  # This is the partition that contains one of the zpool's (zmirror-sysfs)
  # mirrors.
  - !Disk

    # the uuid of the gpt partition table
    uuid: abcdefg0123456

    content:
      - !Partition

        name: zmirror-sysfs-s

        
        content:
          - !DMCrypt

            name: zmirror-sysfs-s
            
            key_file: ./test/zmirror-key

            on_children_offline: 
              - offline

            on_parent_online:
              - online

            content:
              - !ZFSBackingBlockDevice
              
                dev: zmirror-sysfs-s
                pool: zmirror-sysfs

                on_parent_online: 
                  - online
                
                # This NVMe drive is a different spec (2242) than sysfs-a, b and c. It has a smaller
                # form factor, so it fits into a smaller USB drive big encloser. But it also is 
                # slower (PCIe 1.0) than the other three. Hence I take it offline after a resilver.
                on_resilvered:
                  - offline

                on_scrubbed:
                  - trim
                
                # because of the slower speed (same reason as above) I take it offline when the operation
                # is done.
                on_trimmed:
                  - offline

                scrub_interval: 1 week






  - !ZPool
    name: zmirror-big





  - !Partition

    name: zmirror-big-a

    content:
      - !DMCrypt

        name: zmirror-big-a
        
        key_file: ./test/zmirror-key

        on_children_offline: 
          - offline
        
        on_parent_online:
          - online

        content:
          - !ZFSBackingBlockDevice
          
            dev: zmirror-big-a

            pool: zmirror-big
          
            on_parent_online:
              - import-pool

            scrub_interval: 3 weeks






  - !Partition

    name: zmirror-big-b

    
    content:
      - !DMCrypt

        name: zmirror-big-b
        
        key_file: ./test/zmirror-key

        on_children_offline: 
          - offline

        content:

          - !ZFSBackingBlockDevice
          
            dev: zmirror-big-b

            pool: zmirror-big
          

            on_parent_online:
              - online

            scrub_interval: 3 week






  # this is one of the two pools which contains zfs volumes that mirror
  # the zpools zmirror-sysfs and zmirror-big
  - !ZPool
    name: zmirror-bak-a

    # when all volumes configured below are offline (WARNING: see explanation 
    # below on how we implemented this) the zpool should be exported.
    # 
    # WARNING: this kind of configuration only makes sense if you use the
    # zpool zmirror-bak-a ONLY as a container for volumes that are managed
    # by zmirror. In any other case you want to tell zmirror to never
    # export the pool and instead handle that manually
    on_children_offline: 
      # TODO: implement synonym export == offline
      - export

    content:
      
      # since zmirror needs udev/zed events to process state changes we use
      # the fact that we can make zvols invisible to the system to generate
      # those events. In other words zmirror issues
      #
      # :: zfs set volmode=none zmirror-bak-a/sysfs
      # 
      # which makes the volume disappear as a blockdev. Then we catch the 
      # udev event and then we consider the volume offline.
      # 
      # it is important to note that the blockdev will only disappear when
      # it is not in use anymore. Only then will the udev events be sent and
      # only then can zmirror act apropriately.
      # 
      # When both `zmirror-bak-a/sysfs` and `zmirror-bak-a/big` are (cosidered)
      # offline, zmirror will export the pool (as configured above).
      - !ZFSVolume
        name: sysfs

        on_children_offline:
          - offline
        
        # when the zpool zmirror-bak-a comes online, zmirror will issue the
        # the command:
        #
        # :: zfs set volmode=full zmirror-bak-a/sysfs
        # 
        # which causes the volume to become visible to the system like a any
        # other blockdev (e.g. /dev/zd224)
        # 
        # Then zmirror catches the respective udev event and changes its
        # internal state of the volume to online.
        on_parent_online:
          - online
        
        content:

          - !ZFSBackingBlockDevice
            pool: zmirror-sysfs
            dev: zvol/zmirror-bak-a/sysfs

            on_resilvered:
              # when a resilver is done, we want to snapshot the zfs volume
              # backing the zpool
              - snapshot-parent

              # VERY IMPORTANT
              # 
              # zmirror-bak-a is backed by a rotating magnetic disk which
              # is rather slow compared to the NVMe disks that back
              # zmirror-sysfs or the SSDs that back zmirror-big.
              # 
              # This is no problem during resilver as any WRITE issued for
              # the zmirror-sysfs zpool will only go to the disks that are not 
              # resilvering.
              #
              # But the moment that the resilver finishes, the WRITE speed
              # of the WHOLE zpool would drop down to the speed of the rotating 
              # disk. To avoid this, we take the backing blockdev offline right
              # away.
              - offline

            # above problem is unavoidable during a scrub, since for scrubbing
            # this blockdev must be online within the zmirror-sysfs zpool. 
            # Consequently we do scrubbing at night when lowered pool speed
            # is less of an issue. And to avoid keeping the 
            # zmirror-sysfs zpool's WRITE speed as low as the speed of the 
            # rotating disk (which is backing zmirror-bak-a) we take the
            # blockdev offline right away.
            on_scrubbed:
              - offline

            on_parent_online:
              - online
      
      - !ZFSVolume
        name: big
        
        on_children_offline: 
          - offline

        on_parent_online:
          - online
        
        content:
          
          - !ZFSBackingBlockDevice
            
            dev: zvol/zmirror-bak-a/big
            pool: zmirror-big

            on_parent_online:
              - online

            on_scrubbed: 
              - offline

            on_resilvered: 
              - snapshot-parent
              - offline







  # zmirror-bak-a is my first backup disk (I actually have more than are 
  # configured in this config). These backup disks are physically distributed, 
  # that is I store them in multiple locations outside my home. In this way I 
  # mitigate the risk of a local catastrophy such as a fire
  #
  # This disk contains but a single zpool (which is backed only by this disk)
  # The consequence is that I cannot scrub this pool.
  #
  # So on this particular backup disk I am not protected against bitrot
  # I do minimize the risk however by storing this disk in an EMP protected bag
  # which also protects the disk against other electromagnetic radiation 
  # (that is one of the causes of bitrot)
  #
  # but since zmirror creates snapshots whenever I synchronize this disk
  # and since zmirror scrubs the latest data whenever I synchronize this disk
  # bitrot can only damage older snapshots, never the newest one
  #
  # and this even protects older data, since both the sysfs and the big pool
  # actually do contain (a limited number of) snapshots of older data that I curate manually
  # and all the data inside the big and the sysfs zpools have parity (are mirrored) 
  # and can be scrubbed and restored
  #
  # this is the partition that contains the zpool data
  - !Partition
    name: zmirror-bak-a

    content:
      - !DMCrypt
        name: zmirror-bak-a
        
        key_file: ./test/zmirror-key
        
        on_parent_online:
          - online
        
        on_children_offline: 
          - offline

        content: 
          - !ZFSBackingBlockDevice
            
            dev: zmirror-bak-a
            
            pool: zmirror-bak-a
          
            on_parent_online:
              - import-pool

            scrub-interval: 3 weeks











  # This pool is fully protected against bitrot, since it is backed by 
  # two disks. For this to work it is necessary that (at least every now and
  # then) you connect both backing disks at the same time and ensure that
  # they will be scrubbed (as this zmirror config does every 3 weeks as long 
  # as you keep the disks connected over night)
  - !ZPool
    name: zmirror-bak-b

    on_children_offline: 
      - offline
    
    # this zpool (in contrast to sysfs or big) will only be imported once all 
    # its backing blockdevices are present in the system.
    on_all_backing_block_devices_present:
      # synonym: import == online
      - import

    content:
      
      - !ZFSVolume
        name: sysfs
        on_children_offline: 
          - snapshot
          - offline
        content:

          - !ZFSBackingBlockDevice
            dev: zvol/zmirror-bak-b/sysfs
            pool: zmirror-sysfs
            
            on_parent_online:
              - online
          
            on_scrubbed:
              - offline

            on_resilvered:
              - snapshot-parent
              - offline
      
      - !ZFSVolume
        name: big
        on_children_offline:
          - offline
        content:
          - !ZFSBackingBlockDevice
            dev: zvol/zmirror-bak-b/big
            pool: zmirror-big

            on_parent_online:
              - online
          
            on_scrubbed:
              - offline

            on_resilvered:
              - snapshot-parent
              - offline







  # this is the main partition of the first disk that is backing zmirror-bak-b
  # We could have used full disks here, since zfs recommends using full disks
  # to back its pools. But there is no consistent way to name disks, while it
  # is quite possible to name partitions. It simply results in a more easy to
  # understand configuration if you can use names instead of serial numbers
  # and performance is not an issue anyways.
  - !Partition
    name: zmirror-bak-b-alpha

    content:
      - !DMCrypt
        name: zmirror-bak-b-alpha
        
        key_file: ./test/zmirror-key

        on_parent_online:
          - online

        on_children_offline: 
          - offline

        content: 

          - !ZFSBackingBlockDevice

            dev: zmirror-bak-b-alpha

            pool: zmirror-bak-b
          
            on_parent_online:
              - online

            scrub_interval: 3 weeks


  # this is the main partition of hte second disk that is backing zmirror-bak-b
  - !Partition
    name: zmirror-bak-b-beta

    content:
      - !DMCrypt
        name: zmirror-bak-b-beta
        
        key_file: ./test/zmirror-key

        on_parent_online:
          - online

        on_children_offline: 
          - offline

        content: 

          - !ZFSBackingBlockDevice

            dev: zmirror-bak-b-beta

            pool: zmirror-bak-b
          
            on_parent_online:
              - online
            
            scrub_interval: 3 weeks





