#!/bin/python3
# ******************************************************************************
# - *-coding: utf-8 -*-
# (c) copyright 2025 Alexander Poeschl
# All rights reserved.
# ******************************************************************************
# @file test_group2.py
# @author Alexander Poeschl <apoeschlfreelancing@kwanta.net>, Michael Poeschl
# @brief Pytests group2 for zmirror
# ******************************************************************************
import os
import json
import inspect
from datetime import datetime
import pytest
import zmirror_commands
from zmirror_dataclasses import EntityState, ZFSBackingBlockDeviceCache, ZFSOperationState, ZFSBackingBlockDevice, ZFSVolume, Disk, Partition

import zmirror_utils as zmirror_core
from zmirror_daemon import handle
from zmirror import myexec, scrub
from pyutils import load_yaml_cache


pyexec = exec
exec = myexec #pylint: disable=redefined-builtin




def open_local(file, mode):
  filepath = os.path.join(os.path.dirname(__file__), file)
  return open(filepath, mode, encoding='utf-8')

def get_zpool_status_stub(args): #pylint: disable=unused-argument
  with open_local("scrub_status.txt", "r") as file:
    return file.read()



def trigger_event():
  name = inspect.currentframe().f_back.f_code.co_name
  event = load_event(name + ".json")
  handle(event)

def load_event(json_file):
  with open_local(json_file, "r") as f:
    src = f.read()
  return json.loads(src)

def do_nothing(*args): #pylint: disable=unused-argument
  pass

def load_dummy_cache(**args): #pylint: disable=unused-argument
  zmirror_core.cache_dict = load_yaml_cache("./test/status/zfs/group2/test_cache.yml")


zmirror_core.load_cache = load_dummy_cache
zmirror_core.write_cache = do_nothing

def assert_commands(cmds):
  assert (
      cmds == zmirror_commands.commands
  )

# this group of tests all require the daemon running, hence they are grouped
class TestExampleConfig():


  # event_queue = None
  @classmethod
  def setup_class(cls):
    zmirror_core.load_config(config_path="./example-config.yml")
    zmirror_core.load_cache(cache_path="./test/cache.yml")


  def setup_method(self, method): #pylint: disable=unused-argument
    # we use a stub method. this is only relevant for the scrub events
    zmirror_core.get_zpool_status = get_zpool_status_stub
    zmirror_core.execute_commands = do_nothing

    # core.config_file_path = os.pardir(__file__) + "/config.yml"
    # load_config()
    # core.cache_file_path = "./run/test/state/cache.yml"
    # self.daemon_thread = threading.Thread(target=run_command, args=(["--state-dir", "./run/state", "--config-file", f"{get_current_module_directory()}/config.yml"], ))
    # self.daemon_thread.start()
    # if self.event_queue == None:
      # self.event_queue = queue.Queue()


  def teardown_method(self, method): #pylint: disable=unused-argument
    # terminate_thread(self.daemon_thread)
    # silent_remove(core.cache_file_path)
    # pass
    zmirror_commands.commands = []



  # sysfs-a
  # physical device of sysfs-a gets plugged-in (by user)
  # disk of sysfs-a appears (udev: add)
  def test_disk_sysfs_a_online(self):
    trigger_event()

    # zmirror needs to do nothing (issue no commands)
    assert_commands([])


  # partition of sysfs-a appears (udev: add)
  def test_partition_sysfs_a_online(self):
    trigger_event()
    assert_commands([
      "cryptsetup open /dev/disk/by-partlabel/zmirror-sysfs-a zmirror-sysfs-a --key_file ./test/zmirror-key"
    ])

  # dmcrypt of sysfs-a appears
  def test_dmcrypt_sysfs_a_online(self):
    trigger_event()
    assert_commands([
      "zpool import zmirror-sysfs",
      "zpool online zmirror-sysfs zmirror-sysfs-a"
    ])

  # the VIRTUAL event when the blockdev actually goes online inside the zpool
  def test_backing_blockdev_sysfs_a_online(self):
    # this event will never be sent
    # because the device will not actually be taken online in the pool
    # since it is the only device (at this point in the test process)
    # that is connected and thus the pool has been imported with this
    # device already present and online
    #
    # but a virtual "event" will be generated by zmirror
    # (virtual event only means that the handle_ functions will be called)
    # when the zpool is imported
    # zmirror needs to do nothing (issue no commands)
    assert_commands([])


  # `zpool import zmirror-sysfs-a` (do `zpool export zmirror-sysfs-a` before, if the pool is already imported)
  def test_zpool_sysfs_online(self):
    trigger_event()

    # zmirror has to do nothing
    assert_commands([])


  # sysfs-b
  # physical device of sysfs-b gets plugged-in

  # disk of sysfs-b appears (udev: add)
  def test_disk_sysfs_b_online(self):
    trigger_event()

    # zmirror needs to do nothing (issue no commands)
    assert_commands([])

  # partition of sysfs-b appears (udev: add)
  def test_partition_sysfs_b_online(self):
    trigger_event()
    assert_commands([
      "cryptsetup open /dev/disk/by-partlabel/zmirror-sysfs-b zmirror-sysfs-b --key_file ./test/zmirror-key"
    ])

  # dmcrypt of sysfs-b appears
  def test_dmcrypt_sysfs_b_online(self):
    trigger_event()
    assert_commands([
      "zpool online zmirror-sysfs zmirror-sysfs-b"
    ])

  # the event when the blockdev actually goes online inside the zpool
  def test_backing_blockdev_sysfs_b_online(self):
    trigger_event()
    # zmirror needs to do nothing (issue no commands)
    assert_commands([])


  def test_zpool_sysfs_backing_blockdev_sysfs_b_resilver_start(self):
    trigger_event()
    # zmirror needs to do nothing (issue no commands) as nothing is defined in the config file
    assert_commands([])


  def test_zpool_sysfs_backing_blockdev_sysfs_b_resilver_finish(self):
    trigger_event()
    # zmirror needs to do nothing (issue no commands) as nothing is defined in the config file
    assert_commands([])



    # TODO: implement scheduler: */*/14 03:00
    # TODO: implement cache file path configurable (and different path when testing)
    # TODO: implement scrubbing interval

  def test_trigger_scrub_sysfs_a_and_b(self):
    scrub(None)
    assert_commands([
      "zpool scrub zmirror-sysfs"
    ])

  def test_scrub_started_sysfs_a_and_b(self):
    assert_commands([])


  def test_scrub_finished_sysfs_a_and_b(self):
    assert_commands([])


  # sysfs-s
  # physical device of sysfs-s gets plugged-in

  # disk of sysfs-s appears (udev: add)
  def test_disk_sysfs_s_online(self):
    trigger_event()

    # zmirror needs to do nothing (issue no commands)
    assert_commands([])

  # partition of sysfs-s appears (udev: add)
  def test_partition_sysfs_s_online(self):
    trigger_event()
    assert_commands([
      "cryptsetup open /dev/disk/by-partlabel/zmirror-sysfs-s zmirror-sysfs-s --key_file ./test/zmirror-key"
    ])

  # dmcrypt of sysfs-s appears
  def test_dmcrypt_sysfs_s_online(self):
    trigger_event()
    assert_commands([
      "zpool online zmirror-sysfs zmirror-sysfs-s"
    ])

  # the event when the blockdev actually goes online inside the zpool
  def test_backing_blockdev_sysfs_s_online(self):
    trigger_event()
    # zmirror needs to do nothing (issue no commands)
    assert_commands([])


  def test_zpool_sysfs_backing_blockdev_sysfs_s_resilver_start(self):
    trigger_event()
    # zmirror needs to do nothing (issue no commands) as nothing is defined in the config file
    assert_commands([])


  def test_zpool_sysfs_backing_blockdev_sysfs_s_resilver_finish(self):
    trigger_event()
    # zmirror needs to do nothing (issue no commands) as nothing is defined in the config file
    assert_commands([])



  # #########################################
  # bak-a
  # #########################################

  
  # physical device of bak-a gets plugged-in
  # disk of bak-a appears (udev: add)
  def test_disk_bak_a_online(self):
    trigger_event()

    # zmirror needs to do nothing (issue no commands)
    assert_commands([])


  # partition of bak-a appears (udev: add)
  def test_partition_bak_a_online(self):
    trigger_event()
    assert_commands([
      "cryptsetup open /dev/disk/by-partlabel/zmirror-bak-a zmirror-bak-a --key_file ./test/zmirror-key"
    ])


  # the VIRTUAL event when the blockdev actually goes online inside the zpool
  def test_backing_blockdev_bak_a_online(self):
    # this event will never be sent
    # because the device will not actually be taken online in the pool
    # since it is the only device (at this point in the test process)
    # that is connected and thus the pool has been imported with this
    # device already present and online
    #
    # but a virtual "event" will be generated by zmirror
    # (virtual event only means that the handle_ functions will be called)
    # when the zpool is imported

    # zmirror needs to do nothing (issue no commands)
    assert_commands([])

  # dmcrypt of bak-a appears
  def test_dmcrypt_bak_a_online(self):
    trigger_event()
    assert_commands([
      "zpool import zmirror-bak-a"
    ])


  # `zpool import zmirror-bak-a` (do `zpool export zmirror-bak-a` before, if the pool is already imported)
  def test_zpool_bak_a_online(self):
    trigger_event()

    # zmirror has to do nothing
    assert_commands([
      "zfs set volmode=full zmirror-bak-a/sysfs"
      "zfs set volmode=full zmirror-bak-a/big"
    ])

  # bak-a-sysfs zfs_volume appears (udev: add)
  def test_zfs_volume_bak_a_sysfs_online(self):
    trigger_event()
    assert_commands([
      "zpool online zmirror-sysfs zvol/zmirror-bak-a/sysfs"
    ])

  # bak-a-big zfs_volume appears (udev: add)
  def test_zfs_volume_bak_a_big_online(self):
    trigger_event()
    assert_commands([
      "zpool online zmirror-big zvol/mirror-bak-a/big"
    ])



  def test_zpool_sysfs_backing_blockdev_bak_a_sysfs_resilver_start(self):
    trigger_event()
    # zmirror needs to do nothing (issue no commands)
    assert_commands([])



  def test_zpool_big_backing_blockdev_bak_a_big_resilver_start(self):
    trigger_event()
    # zmirror needs to do nothing (issue no commands)
    assert_commands([])





  def test_zpool_sysfs_backing_blockdev_bak_a_sysfs_resilver_finish(self):
    trigger_event()
    assert_commands([
      "zfs snapshot zmirror-bak-a/sysfs",
      "zpool offline zmirror-sysfs zvol/zmirror-bak-a/sysfs"
    ])



  def test_zpool_sysfs_backing_blockdev_bak_a_sysfs_disconnected(self):
    trigger_event()
    assert_commands([
      "zfs set volmode=none zmirror-bak-a/sysfs"
    ])



  def test_zfs_volume_bak_a_sysfs_offline(self):
    trigger_event()
    assert_commands([
    ])


  def test_zpool_big_backing_blockdev_bak_a_big_resilver_finish(self):
    trigger_event()
    assert_commands([
      "zfs snapshot zmirror-bak-a/big",
      "zpool offline zmirror-big zvol/zmirror-bak-a/big"
    ])


  def test_zpool_big_backing_blockdev_bak_a_big_disconnected(self):
    trigger_event()
    assert_commands([
      "zfs set volmode=none zmirror-bak-a/big"
    ])

  def test_zfs_volume_bak_a_big_offline(self):
    trigger_event()
    # now both sysfs and big are offline, therefore a zpool export will be issued
    assert_commands([
      "zpool export zmirror-bak-a"
    ])

  def test_zpool_bak_a_offline(self):

    # this generates virtual events (that means the handle_ methods will be called)
    # on all the backing blockdevs of that pool that were online.
    trigger_event()

    assert_commands([
      "cryptsetup close zmirror-bak-a"
    ])

  def test_dmcrypt_bak_a_offline(self):

    trigger_event()

    assert_commands([])




  # #########################################
  # bak-b
  # #########################################
  
  
  # bak-b-alpha
  # ###################

  # physical device of bak-b-alpha gets plugged-in
  # disk of bak-b-alpha appears (udev: add)
  def test_disk_bak_b_alpha_online(self):
    trigger_event()

    # zmirror needs to do nothing (issue no commands)
    assert_commands([])


  # partition of bak-b-alpha appears (udev: add)
  def test_partition_bak_b_alpha_online(self):
    trigger_event()
    assert_commands([
      "cryptsetup open /dev/disk/by-partlabel/zmirror-bak-b-alpha zmirror-bak-b-alpha --key_file ./test/zmirror-key"
    ])


  # dmcrypt of bak-b-alpha appears
  def test_dmcrypt_bak_b_alpha_online(self):
    trigger_event()

    # for bak-b-alpha there is no import configured
    # the online command will be issued in case the user
    # had manually already imported the pool
    assert_commands([
      "zpool online zmirror-bak-b zmirror-bak-b-alpha"
    ])


  # bak-b-beta
  # ###################



  # physical device of bak-b-alpha gets plugged-in
  # disk of bak-b-alpha appears (udev: add)
  def test_disk_bak_b_beta_online(self):
    trigger_event()

    # zmirror needs to do nothing (issue no commands)
    assert_commands([])


  # partition of bak-b-alpha appears (udev: add)
  def test_partition_bak_b_beta_online(self):
    trigger_event()
    assert_commands([
      "cryptsetup open /dev/disk/by-partlabel/zmirror-bak-b-alpha zmirror-bak-b-alpha --key_file ./test/zmirror-key"
    ])


  # dmcrypt of bak-b-alpha appears
  def test_dmcrypt_bak_b_beta_online(self):
    trigger_event()

    # the zpool is configured to import only once all blockdevices
    # are present.
    # The online command will be issued in any case to ensure
    # it goes online if the user had manually imported the pool.
    assert_commands([
      "zpool import zmirror-bak-b"
      "zpool online zmirror-bak-b zmirror-bak-b-beta"
    ])


  # `zpool import zmirror-bak-b` (do `zpool export zmirror-bak-b` before, if the pool is already imported)
  def test_zpool_bak_b_online(self):
    trigger_event()

    # zmirror has to do nothing
    assert_commands([
      "zfs set volmode=full zmirror-bak-b/sysfs"
      "zfs set volmode=full zmirror-bak-b/big"
    ])

  # bak-b-sysfs zfs_volume appears (udev: add)
  def test_zfs_volume_bak_b_sysfs_online(self):
    trigger_event()
    assert_commands([
      "zpool online zmirror-sysfs zvol/zmirror-bak-b/sysfs"
    ])

  # bak-b-big zfs_volume appears (udev: add)
  def test_zfs_volume_bak_b_big_online(self):
    trigger_event()
    assert_commands([
      "zpool online zmirror-big zvol/mirror-bak-b/big"
    ])



  def test_zpool_sysfs_backing_blockdev_bak_b_sysfs_resilver_start(self):
    trigger_event()
    # zmirror needs to do nothing (issue no commands)
    assert_commands([])



  def test_zpool_big_backing_blockdev_bak_b_big_resilver_start(self):
    trigger_event()
    # zmirror needs to do nothing (issue no commands)
    assert_commands([])





  def test_zpool_sysfs_backing_blockdev_bak_b_sysfs_resilver_finish(self):
    trigger_event()
    assert_commands([
      "zfs snapshot zmirror-bak-b/sysfs",
      "zpool offline zmirror-sysfs zvol/zmirror-bak-b/sysfs"
    ])



  def test_zpool_sysfs_backing_blockdev_bak_b_sysfs_disconnected(self):
    trigger_event()
    assert_commands([
      "zfs set volmode=none zmirror-bak-b/sysfs"
    ])



  def test_zfs_volume_bak_b_sysfs_offline(self):
    trigger_event()
    assert_commands([
    ])


  def test_zpool_big_backing_blockdev_bak_b_big_resilver_finish(self):
    trigger_event()
    assert_commands([
      "zfs snapshot zmirror-bak-b/big",
      "zpool offline zmirror-big zvol/zmirror-bak-b/big"
    ])

  def test_zpool_big_backing_blockdev_bak_b_big_disconnected(self):
    trigger_event()
    assert_commands([
      "zfs set volmode=none zmirror-bak-b/big"
    ])

  def test_zfs_volume_bak_b_big_offline(self):
    trigger_event()
    # now both sysfs and big are offline, therefore a zpool export will be issued
    assert_commands([
      "zpool export zmirror-bak-b"
    ])

  def test_zpool_bak_b_offline(self):

    # this generates virtual events (that means the handle_ methods will be called)
    # on all the backing blockdevs of that pool that were online.
    trigger_event()

    assert_commands([
      "cryptsetup close zmirror-bak-b"
    ])

  def test_dmcrypt_bak_b_alpha_offline(self):

    trigger_event()

    assert_commands([])

  def test_dmcrypt_bak_b_beta_offline(self):

    trigger_event()

    assert_commands([])


  def test_disk_bak_b_alpha_offline(self):

    trigger_event()

    assert_commands([])


  def test_partition_bak_b_alpha_offline(self):

    trigger_event()

    assert_commands([])


  def test_disk_bak_b_beta_offline(self):

    trigger_event()

    assert_commands([])


  def test_partition_bak_b_beta_offline(self):

    trigger_event()

    assert_commands([])





if __name__ == '__main__':
  pytest.main()
